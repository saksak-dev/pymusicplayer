import os
import time
import vlc
from pynput import keyboard

# Create a VLC instance and player
vlc_instance = vlc.Instance()
player = vlc_instance.media_player_new()

# List of songs and current song index
songs = []
current_song_index = 0
volume = 50
is_playing = True  # Track whether the media is playing or paused


def list_songs(directory):
    """List all songs in the given directory and its subdirectories."""
    songs_list = []
    for root, _, files in os.walk(directory):
        for file in files:
            if file.lower().endswith(('.mp3', '.wav', '.flac')):
                songs_list.append(os.path.join(root, file))
    return songs_list


def play_song(song):
    """Play the specified song."""
    media = vlc_instance.media_new(song)
    player.set_media(media)
    player.play()
    global is_playing
    is_playing = True
    song_name = os.path.splitext(os.path.basename(song))[0]
    print(f"Playing {song_name}")


def next_song():
    """Play the next song in the playlist."""
    global current_song_index
    current_song_index = (current_song_index + 1) % len(songs)
    play_song(songs[current_song_index])


def previous_song():
    """Play the previous song in the playlist."""
    global current_song_index
    current_song_index = (current_song_index - 1) % len(songs)
    play_song(songs[current_song_index])


def increase_volume():
    """Increase the volume."""
    global volume
    volume = min(volume + 10, 100)
    player.audio_set_volume(volume)
    print(f"Volume set to {volume}%")


def decrease_volume():
    """Decrease the volume."""
    global volume
    volume = max(volume - 10, 0)
    player.audio_set_volume(volume)
    print(f"Volume set to {volume}%")


def toggle_play_pause():
    """Toggle play/pause of the current track."""
    global is_playing
    if is_playing:
        player.pause()
    else:
        player.play()
    is_playing = not is_playing
    state = "playing" if is_playing else "paused"
    print(f"Track is now {state}")


def delete_song(song_number):
    """Delete the song at the given index."""
    global songs
    try:
        index = int(song_number) - 1
        if 0 <= index < len(songs):
            del songs[index]
            print("Song deleted successfully.")
        else:
            print("Invalid song number.")
    except ValueError:
        print("Invalid input. Please enter a numeric value.")

    # Print the updated list of songs
    for index, song in enumerate(songs):
        print(f"\033[1m{index + 1}\033[0m {song} ")


def on_press(key):
    """Handle key presses."""
    try:
        if key == keyboard.Key.left:
            print()
            previous_song()
            print()  # Move to a new line after handling the key press
        elif key == keyboard.Key.right:
            print()
            next_song()
            print()  # Move to a new line after handling the key press
        elif key == keyboard.Key.up:
            print()
            increase_volume()
            print()  # Move to a new line after handling the key press
        elif key == keyboard.Key.down:
            print()
            decrease_volume()
            print()  # Move to a new line after handling the key press
        elif key.char == 'p':
            print()
            toggle_play_pause()
            print()  # Move to a new line after handling the key press
        elif key.char == 'd':
            print()
            print("Select a song to delete:")
            for index, song in enumerate(songs):
                print(f"\033[1m{index + 1}\033[0m {song} ")
            song_number = input("Please enter the song number to delete:\n")
            delete_song(song_number)
            print()  # Move to a new line after handling the key press
    except AttributeError:
        # Handle special keys
        pass


def main():
    global songs, current_song_index
    # Get directory from user
    directory = '/home/ognjen/Music/'  # Default directory path

    # List all songs in the directory and subdirectories
    songs = list_songs(directory)

    if not songs:
        print("No audio files found in the selected directory.")
        return

    # Display the list of songs
    print("Available songs:")
    for i, song in enumerate(songs):
        print(f"{i + 1}: {song}")

    # Play the first song initially
    play_song(songs[current_song_index])

    # Set up key listener
    with keyboard.Listener(on_press=on_press) as listener:
        print("Press the left/right arrow keys to navigate songs, and up/down arrow keys to adjust volume.")
        print("Press 'p' to pause or continue the current track.")
        # Keep the script running and listening for key presses
        while True:
            if player.get_state() == vlc.State.Ended:
                next_song()
            time.sleep(1)


if __name__ == "__main__":
    main()
